前情回顾

1. 多任务编程

   多任务： 计算机中同时执行的多个事件 （进程 线程）

   cpu ： cpu如何支持应用的   （并发 并行）

2. 多进程

   进程是一个执行过程，占有运行资源

   PID  进程状态  父子进程   孤儿进程  僵尸进程

   ps -aux  pstree

3. 创建进程

   p = Process()
   p.start()
   p.join()

   os.getpid()  os.getppid()  sys.exit()


练习1： 文件夹拷贝
有一个目录里面有若干普通文件，编写一个程序，将其拷贝一份

要求： 使用进程池完成  拷贝每个文件都作为一个进程事件执行

提示： os.listdir()
      os.mkdir(dir)
      创建新文件夹 --》 将源文件夹中所有文件拷贝过来即可


练习２： 在练习1的基础上完成
拷贝过程中实时显示拷贝的进度，用打印百分比来表示

拷贝百分比 =  已经拷贝的大小 / 总大小  × 100  %

总大小 = 每个文件大小之和   os.path.getsize()





群聊聊天室  （由一个结构 串联所有功能）

1. 需求分析
    * 有人进入聊天室需要输入姓名，姓名不能重复
    * 有人进入聊天室时，其他人会收到通知：xxx 进入了聊天室
    * 一个人发消息，其他人会收到：xxx ： xxxxxxxxxxx
    * 有人退出聊天室，则其他人也会收到通知:xxx退出了聊天室

2. 技术点分析

   存储 ：  用户名  用户地址
           {name:address}  [(name,address)...]

   网络 :  udp通信

   收发消息 ： 转发  建立进程  一个进程负责发送一个接收


3. 功能划分和模块设计（封装设计）

   封装： 函数封装

   模型结构
   进入聊天室
   聊天
   退出聊天室

4. 网络协议设计

              请求的类型      数据参量
  进入聊天室     LOGIN         name
  聊天          CHAT         ........
  退出          EXIT         ........



5. 功能拆分实践

   模型结构
       服务端： 1. 创建udp循环模型
               2. 循环接收各个客户端的各种请求
               3. 根据请求调用模块执行具体功能

       客户端： 1. 创建udp套接字

   进入聊天室
       客户端： 1. 输入姓名
               2. 发送姓名
               3. 接收结果
               4. 进入聊天室/ 回到第一步

       服务端： 1. 接收姓名
               2. 判断用户是否已经存在
               3. 根据判断发送结果
               4. Yes 通知其他人 将用户信息存储
                  No  结束

   聊天

   退出聊天室

6. 优化重构完善



作业： 1. 聊天室代码 过一下   服务端的循环模型  协议设定
      2. 聊天 或者退出 二选一写一下











