前情回顾

1. 线程

   什么是线程： 多任务编程  动态运行过程  轻量级的进程

2. 创建线程
   threading
   Thread()
   start()
   join()

   线程属性   自定义线程类

3. 同步互斥

   Event   e.set()  e.clear()  e.wait()
   Lock    lock.acquire()  lock.release()

   好处： 可以控制多个线程"有序"的使用共享资源
   坏处： 可能降低效率

ftp 文件服务

1. 需求分析
分为服务端和客户端，要求可以有多个客户端同时操作。
客户端可以查看服务器文件库中有什么文件。
客户端可以从文件库中下载文件到本地。
客户端可以上传一个本地文件到文件库。
使用print在客户端打印命令输入提示，引导操作

2. 技术点分析
 * 网络并发模型    多线程    tcp
 * 文件网络发送    发送端： 读取发送
                 接收端： 接收写入

3. 功能划分和封装

   封装 ： 函数 + 类

   搭建网络并发模型
   查看文件库
   下载文件
   上传文件

4. 网络协议设定
              请求类型     数据参量
   查看文件库    LIST
   下载文件      GET       filename
   上传文件      PUT       filename
   退出         EXIT


5. 具体功能逻辑

   网络并发结构搭建 ：

   获取文件列表
      客户端：  输入命令
              发送请求给服务端
              根据反馈结果分情况讨论
              文件库有内容 ： 接收文件列表 打印文件列表
              文件库为空 ： 结束

      服务端 ： 接收请求
               根据情况判断给客户端回复
               Yes : 发送文件列表
               No ： 结束

   下载  (文件不存在的情况)

   上传 （文件已存在）

   退出


cookie :  请求响应

 * 请求发出之后不要想当然认为怎样
   客户端往往针对不同结果分情况讨论

 请求 ： 客户端发送给服务端

        客户端根据需求选择不同的请求  （确定的）

 响应 ： 服务端接收到请求后给客户端的回复

        服务端根据真实的情况回复给客户端 （不确定）


作业 ： 1. 重点代码自己会写
       2. 理解ftp结构模型
       3. 编写一个功能 （上传或者下载）


